// file was generated by kissmath.py at <TODO: add github link>
#include "double3x4.hpp"

#include "double2x2.hpp"
#include "double3x3.hpp"
#include "double4x4.hpp"
#include "double2x3.hpp"
#include "float3x4.hpp"

namespace kissmath {
	
	//// Accessors
	
	
	// get cell with row, column indecies
	double const& double3x4::get (int r, int c) const {
		return arr[c][r];
	}
	
	// get matrix column
	double3 const& double3x4::get_column (int indx) const {
		return arr[indx];
	}
	
	// get matrix row
	double4 double3x4::get_row (int indx) const {
		return double4(arr[0][indx], arr[1][indx], arr[2][indx], arr[3][indx]);
	}
	
	//// Constructors
	
	
	// uninitialized constructor
	double3x4::double3x4 () {
		
	}
	
	// supply one value for all cells
	double3x4::double3x4 (double all): 
	arr{double3(all, all, all),
		double3(all, all, all),
		double3(all, all, all),
		double3(all, all, all)} {
		
	}
	
	// supply all cells, in row major order for readability -> c<row><column>
	double3x4::double3x4 (double c00, double c01, double c02, double c03,
						  double c10, double c11, double c12, double c13,
						  double c20, double c21, double c22, double c23): 
	arr{double3(c00, c10, c20),
		double3(c01, c11, c21),
		double3(c02, c12, c22),
		double3(c03, c13, c23)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	double3x4 double3x4::rows (double4 row0, double4 row1, double4 row2) {
		return double3x4(row0[0], row0[1], row0[2], row0[3],
						 row1[0], row1[1], row1[2], row1[3],
						 row2[0], row2[1], row2[2], row2[3]);
	}
	
	// supply all cells in row major order
	double3x4 double3x4::rows (double c00, double c01, double c02, double c03,
							   double c10, double c11, double c12, double c13,
							   double c20, double c21, double c22, double c23) {
		return double3x4(c00, c01, c02, c03,
						 c10, c11, c12, c13,
						 c20, c21, c22, c23);
	}
	
	// supply all column vectors
	double3x4 double3x4::columns (double3 col0, double3 col1, double3 col2, double3 col3) {
		return double3x4(col0[0], col1[0], col2[0], col3[0],
						 col0[1], col1[1], col2[1], col3[1],
						 col0[2], col1[2], col2[2], col3[2]);
	}
	
	// supply all cells in column major order
	double3x4 double3x4::columns (double c00, double c10, double c20,
								  double c01, double c11, double c21,
								  double c02, double c12, double c22,
								  double c03, double c13, double c23) {
		return double3x4(c00, c01, c02, c03,
						 c10, c11, c12, c13,
						 c20, c21, c22, c23);
	}
	
	
	// identity matrix
	double3x4 double3x4::identity () {
		return double3x4(1,0,0,0,
						 0,1,0,0,
						 0,0,1,0);
	}
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	double3x4::operator double2x2 () const {
		return double2x2(arr[0][0], arr[1][0],
						 arr[0][1], arr[1][1]);
	}
	
	// extend/truncate matrix of other size
	double3x4::operator double3x3 () const {
		return double3x3(arr[0][0], arr[1][0], arr[2][0],
						 arr[0][1], arr[1][1], arr[2][1],
						 arr[0][2], arr[1][2], arr[2][2]);
	}
	
	// extend/truncate matrix of other size
	double3x4::operator double4x4 () const {
		return double4x4(arr[0][0], arr[1][0], arr[2][0], arr[3][0],
						 arr[0][1], arr[1][1], arr[2][1], arr[3][1],
						 arr[0][2], arr[1][2], arr[2][2], arr[3][2],
						         0,         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	double3x4::operator double2x3 () const {
		return double2x3(arr[0][0], arr[1][0], arr[2][0],
						 arr[0][1], arr[1][1], arr[2][1]);
	}
	
	// typecast
	double3x4::operator float3x4 () const {
		return float3x4((float)arr[0][0], (float)arr[0][1], (float)arr[0][2], (float)arr[0][3],
						(float)arr[1][0], (float)arr[1][1], (float)arr[1][2], (float)arr[1][3],
						(float)arr[2][0], (float)arr[2][1], (float)arr[2][2], (float)arr[2][3]);
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	// add scalar to all matrix cells
	double3x4& double3x4::operator+= (double r) {
		*this = *this + r;
		return *this;
	}
	
	// substract scalar from all matrix cells
	double3x4& double3x4::operator-= (double r) {
		*this = *this - r;
		return *this;
	}
	
	// multiply scalar with all matrix cells
	double3x4& double3x4::operator*= (double r) {
		*this = *this * r;
		return *this;
	}
	
	// divide all matrix cells by scalar
	double3x4& double3x4::operator/= (double r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	// matrix-matrix muliplication
	double3x4& double3x4::operator*= (double3x4 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	
	// componentwise matrix_cell + matrix_cell
	double3x4 operator+ (double3x4 const& l, double3x4 const& r) {
		return double3x4(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0], l.arr[3][0] + r.arr[3][0],
						 l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1], l.arr[3][1] + r.arr[3][1],
						 l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2], l.arr[3][2] + r.arr[3][2]);
	}
	
	// componentwise matrix_cell + scalar
	double3x4 operator+ (double3x4 const& l, double r) {
		return double3x4(l.arr[0][0] + r, l.arr[1][0] + r, l.arr[2][0] + r, l.arr[3][0] + r,
						 l.arr[0][1] + r, l.arr[1][1] + r, l.arr[2][1] + r, l.arr[3][1] + r,
						 l.arr[0][2] + r, l.arr[1][2] + r, l.arr[2][2] + r, l.arr[3][2] + r);
	}
	
	// componentwise scalar + matrix_cell
	double3x4 operator+ (double l, double3x4 const& r) {
		return double3x4(l + r.arr[0][0], l + r.arr[1][0], l + r.arr[2][0], l + r.arr[3][0],
						 l + r.arr[0][1], l + r.arr[1][1], l + r.arr[2][1], l + r.arr[3][1],
						 l + r.arr[0][2], l + r.arr[1][2], l + r.arr[2][2], l + r.arr[3][2]);
	}
	
	
	// componentwise matrix_cell - matrix_cell
	double3x4 operator- (double3x4 const& l, double3x4 const& r) {
		return double3x4(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0], l.arr[3][0] - r.arr[3][0],
						 l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1], l.arr[3][1] - r.arr[3][1],
						 l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2], l.arr[3][2] - r.arr[3][2]);
	}
	
	// componentwise matrix_cell - scalar
	double3x4 operator- (double3x4 const& l, double r) {
		return double3x4(l.arr[0][0] - r, l.arr[1][0] - r, l.arr[2][0] - r, l.arr[3][0] - r,
						 l.arr[0][1] - r, l.arr[1][1] - r, l.arr[2][1] - r, l.arr[3][1] - r,
						 l.arr[0][2] - r, l.arr[1][2] - r, l.arr[2][2] - r, l.arr[3][2] - r);
	}
	
	// componentwise scalar - matrix_cell
	double3x4 operator- (double l, double3x4 const& r) {
		return double3x4(l - r.arr[0][0], l - r.arr[1][0], l - r.arr[2][0], l - r.arr[3][0],
						 l - r.arr[0][1], l - r.arr[1][1], l - r.arr[2][1], l - r.arr[3][1],
						 l - r.arr[0][2], l - r.arr[1][2], l - r.arr[2][2], l - r.arr[3][2]);
	}
	
	
	// componentwise matrix_cell * matrix_cell
	double3x4 mul_componentwise (double3x4 const& l, double3x4 const& r) {
		return double3x4(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0], l.arr[3][0] * r.arr[3][0],
						 l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1], l.arr[3][1] * r.arr[3][1],
						 l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2], l.arr[3][2] * r.arr[3][2]);
	}
	
	// componentwise matrix_cell * scalar
	double3x4 operator* (double3x4 const& l, double r) {
		return double3x4(l.arr[0][0] * r, l.arr[1][0] * r, l.arr[2][0] * r, l.arr[3][0] * r,
						 l.arr[0][1] * r, l.arr[1][1] * r, l.arr[2][1] * r, l.arr[3][1] * r,
						 l.arr[0][2] * r, l.arr[1][2] * r, l.arr[2][2] * r, l.arr[3][2] * r);
	}
	
	// componentwise scalar * matrix_cell
	double3x4 operator* (double l, double3x4 const& r) {
		return double3x4(l * r.arr[0][0], l * r.arr[1][0], l * r.arr[2][0], l * r.arr[3][0],
						 l * r.arr[0][1], l * r.arr[1][1], l * r.arr[2][1], l * r.arr[3][1],
						 l * r.arr[0][2], l * r.arr[1][2], l * r.arr[2][2], l * r.arr[3][2]);
	}
	
	
	// componentwise matrix_cell / matrix_cell
	double3x4 div_componentwise (double3x4 const& l, double3x4 const& r) {
		return double3x4(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0], l.arr[3][0] / r.arr[3][0],
						 l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1], l.arr[3][1] / r.arr[3][1],
						 l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2], l.arr[3][2] / r.arr[3][2]);
	}
	
	// componentwise matrix_cell / scalar
	double3x4 operator/ (double3x4 const& l, double r) {
		return double3x4(l.arr[0][0] / r, l.arr[1][0] / r, l.arr[2][0] / r, l.arr[3][0] / r,
						 l.arr[0][1] / r, l.arr[1][1] / r, l.arr[2][1] / r, l.arr[3][1] / r,
						 l.arr[0][2] / r, l.arr[1][2] / r, l.arr[2][2] / r, l.arr[3][2] / r);
	}
	
	// componentwise scalar / matrix_cell
	double3x4 operator/ (double l, double3x4 const& r) {
		return double3x4(l / r.arr[0][0], l / r.arr[1][0], l / r.arr[2][0], l / r.arr[3][0],
						 l / r.arr[0][1], l / r.arr[1][1], l / r.arr[2][1], l / r.arr[3][1],
						 l / r.arr[0][2], l / r.arr[1][2], l / r.arr[2][2], l / r.arr[3][2]);
	}
	
	// Matrix ops
	
	
	// matrix-matrix multiply
	double3x4 operator* (double3x4 const& l, double4x4 const& r) {
		double3x4 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		ret.arr[3] = l * r.arr[3];
		return ret;
	}
	
	// matrix-vector multiply
	double3 operator* (double3x4 const& l, double4 r) {
		double3 ret;
		ret[0] = l.arr[0].x * r.x + l.arr[1].x * r.y + l.arr[2].x * r.z + l.arr[3].x * r.w;
		ret[1] = l.arr[0].y * r.x + l.arr[1].y * r.y + l.arr[2].y * r.z + l.arr[3].y * r.w;
		ret[2] = l.arr[0].z * r.x + l.arr[1].z * r.y + l.arr[2].z * r.z + l.arr[3].z * r.w;
		return ret;
	}
	
	// vector-matrix multiply
	double4 operator* (double3 l, double3x4 const& r) {
		double4 ret;
		ret[0] = l.x * r.arr[0].x + l.y * r.arr[0].y + l.z * r.arr[0].z;
		ret[1] = l.x * r.arr[1].x + l.y * r.arr[1].y + l.z * r.arr[1].z;
		ret[2] = l.x * r.arr[2].x + l.y * r.arr[2].y + l.z * r.arr[2].z;
		ret[3] = l.x * r.arr[3].x + l.y * r.arr[3].y + l.z * r.arr[3].z;
		return ret;
	}
	
	// Matrix operation shortforms so that you can treat a 3x4 matrix as a 3x3 matrix plus translation
	
	
	// shortform for double3x4 * (double4x4)double3x3
	double3x4 operator* (double3x4 const& l, double3x3 const& r) {
		return l * (double4x4)r;
	}
	
	// shortform for double3x4 * (double4x4)double3x4
	double3x4 operator* (double3x4 const& l, double3x4 const& r) {
		return l * (double4x4)r;
	}
	
	// shortform for double3x4 * double4(double3, 1)
	double3 operator* (double3x4 const& l, double3 r) {
		return l * double4(r, 1);
	}
}

