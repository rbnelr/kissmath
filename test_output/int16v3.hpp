// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include "int16.hpp"

namespace kissmath {
	//// forward declarations
	
	struct uint8v3;
	struct uint3;
	struct int16v4;
	struct float3;
	struct double3;
	struct int16v2;
	struct int64v3;
	struct uint16v3;
	struct int3;
	struct uint64v3;
	struct int8v3;
	struct bool3;
	
	struct int16v3 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				int16	x, y, z;
			};
			int16		arr[3];
		};
		
		// Component indexing operator
		int16& operator[] (int i);
		
		// Component indexing operator
		int16 const& operator[] (int i) const;
		
		
		// uninitialized constructor
		int16v3 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		int16v3 (int16 all);
		
		// supply all components
		int16v3 (int16 x, int16 y, int16 z);
		
		// extend vector
		int16v3 (int16v2 xy, int16 z);
		
		// truncate vector
		int16v3 (int16v4 v);
		
		
		//// Truncating cast operators
		
		// truncating cast operator
		explicit operator int16v2 () const;
		
		
		//// Type cast operators
		
		// type cast operator
		explicit operator bool3 () const;
		
		// type cast operator
		explicit operator float3 () const;
		
		// type cast operator
		explicit operator double3 () const;
		
		// type cast operator
		explicit operator int8v3 () const;
		
		// type cast operator
		explicit operator int3 () const;
		
		// type cast operator
		explicit operator int64v3 () const;
		
		// type cast operator
		explicit operator uint8v3 () const;
		
		// type cast operator
		explicit operator uint16v3 () const;
		
		// type cast operator
		explicit operator uint3 () const;
		
		// type cast operator
		explicit operator uint64v3 () const;
		
		
		// componentwise arithmetic operator
		int16v3 operator+= (int16v3 r);
		
		// componentwise arithmetic operator
		int16v3 operator-= (int16v3 r);
		
		// componentwise arithmetic operator
		int16v3 operator*= (int16v3 r);
		
		// componentwise arithmetic operator
		int16v3 operator/= (int16v3 r);
		
	};
	
	//// arthmethic ops
	
	int16v3 operator+ (int16v3 v);
	
	int16v3 operator- (int16v3 v);
	
	int16v3 operator+ (int16v3 l, int16v3 r);
	
	int16v3 operator- (int16v3 l, int16v3 r);
	
	int16v3 operator* (int16v3 l, int16v3 r);
	
	int16v3 operator/ (int16v3 l, int16v3 r);
	
	
	//// bitwise ops
	
	int16v3 operator~ (int16v3 v);
	
	int16v3 operator& (int16v3 l, int16v3 r);
	
	int16v3 operator| (int16v3 l, int16v3 r);
	
	int16v3 operator^ (int16v3 l, int16v3 r);
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	bool3 operator< (int16v3 l, int16v3 r);
	
	// componentwise comparison returns a bool vector
	bool3 operator<= (int16v3 l, int16v3 r);
	
	// componentwise comparison returns a bool vector
	bool3 operator> (int16v3 l, int16v3 r);
	
	// componentwise comparison returns a bool vector
	bool3 operator>= (int16v3 l, int16v3 r);
	
	// componentwise comparison returns a bool vector
	bool3 operator== (int16v3 l, int16v3 r);
	
	// componentwise comparison returns a bool vector
	bool3 operator!= (int16v3 l, int16v3 r);
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (int16v3 l, int16v3 r);
	
	// componentwise ternary (c ? l : r)
	int16v3 select (bool3 c, int16v3 l, int16v3 r);
	
	
	//// misc ops
	// componentwise absolute
	int16v3 abs (int16v3 v);
	
	// componentwise minimum
	int16v3 min (int16v3 l, int16v3 r);
	
	// componentwise maximum
	int16v3 max (int16v3 l, int16v3 r);
	
	// componentwise clamp into range [a,b]
	int16v3 clamp (int16v3 x, int16v3 a, int16v3 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	int16v3 clamp (int16v3 x);
	
	// get minimum component of vector, optionally get component index via min_index
	int16 min_component (int16v3 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	int16 max_component (int16v3 v, int* max_index=nullptr);
	
	
	// componentwise wrap
	int16v3 wrap (int16v3 v, int16v3 range);
	
	// componentwise wrap
	int16v3 wrap (int16v3 v, int16v3 a, int16v3 b);
	
	
	
	//// Vector math
	
	// magnitude of vector
	float length (int16v3 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	int16 length_sqr (int16v3 v);
	
	// distance between points, equivalent to length(a - b)
	float distance (int16v3 a, int16v3 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	float3 normalize (int16v3 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	float3 normalizesafe (int16v3 v);
	
	// dot product
	int16 dot (int16v3 l, int16v3 r);
	
	// 3d cross product
	int16v3 cross (int16v3 l, int16v3 r);
	
}

