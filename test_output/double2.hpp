// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include "double.hpp"

namespace kissmath {
	//// forward declarations
	
	struct int16v2;
	struct int64v2;
	struct uint64v2;
	struct int8v2;
	struct double3;
	struct uint2;
	struct double4;
	struct uint8v2;
	struct float2;
	struct int2;
	struct bool2;
	struct uint16v2;
	
	struct double2 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				double	x, y;
			};
			double		arr[2];
		};
		
		// Component indexing operator
		double& operator[] (int i);
		
		// Component indexing operator
		double const& operator[] (int i) const;
		
		
		// uninitialized constructor
		double2 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		double2 (double all);
		
		// supply all components
		double2 (double x, double y);
		
		// truncate vector
		double2 (double3 v);
		
		// truncate vector
		double2 (double4 v);
		
		
		//// Truncating cast operators
		
		
		//// Type cast operators
		
		// type cast operator
		explicit operator bool2 () const;
		
		// type cast operator
		explicit operator float2 () const;
		
		// type cast operator
		explicit operator int8v2 () const;
		
		// type cast operator
		explicit operator int16v2 () const;
		
		// type cast operator
		explicit operator int2 () const;
		
		// type cast operator
		explicit operator int64v2 () const;
		
		// type cast operator
		explicit operator uint8v2 () const;
		
		// type cast operator
		explicit operator uint16v2 () const;
		
		// type cast operator
		explicit operator uint2 () const;
		
		// type cast operator
		explicit operator uint64v2 () const;
		
		
		// componentwise arithmetic operator
		double2 operator+= (double2 r);
		
		// componentwise arithmetic operator
		double2 operator-= (double2 r);
		
		// componentwise arithmetic operator
		double2 operator*= (double2 r);
		
		// componentwise arithmetic operator
		double2 operator/= (double2 r);
		
	};
	
	//// arthmethic ops
	
	double2 operator+ (double2 v);
	
	double2 operator- (double2 v);
	
	double2 operator+ (double2 l, double2 r);
	
	double2 operator- (double2 l, double2 r);
	
	double2 operator* (double2 l, double2 r);
	
	double2 operator/ (double2 l, double2 r);
	
	
	//// bitwise ops
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	bool2 operator< (double2 l, double2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator<= (double2 l, double2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator> (double2 l, double2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator>= (double2 l, double2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator== (double2 l, double2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator!= (double2 l, double2 r);
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (double2 l, double2 r);
	
	// componentwise ternary (c ? l : r)
	double2 select (bool2 c, double2 l, double2 r);
	
	
	//// misc ops
	// componentwise absolute
	double2 abs (double2 v);
	
	// componentwise minimum
	double2 min (double2 l, double2 r);
	
	// componentwise maximum
	double2 max (double2 l, double2 r);
	
	// componentwise clamp into range [a,b]
	double2 clamp (double2 x, double2 a, double2 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	double2 clamp (double2 x);
	
	// get minimum component of vector, optionally get component index via min_index
	double min_component (double2 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	double max_component (double2 v, int* max_index=nullptr);
	
	
	// componentwise floor
	double2 floor (double2 v);
	
	// componentwise ceil
	double2 ceil (double2 v);
	
	// componentwise round
	double2 round (double2 v);
	
	// componentwise floor to int
	int64v2 floori (double2 v);
	
	// componentwise ceil to int
	int64v2 ceili (double2 v);
	
	// componentwise round to int
	int64v2 roundi (double2 v);
	
	// componentwise pow
	double2 pow (double2 v, double2 e);
	
	// componentwise wrap
	double2 wrap (double2 v, double2 range);
	
	// componentwise wrap
	double2 wrap (double2 v, double2 a, double2 b);
	
	
	
	//// Angle conversion
	
	// converts degrees to radiants
	double2 to_radians (double2 deg);
	
	// converts radiants to degrees
	double2 to_degrees (double2 rad);
	
	// converts degrees to radiants
	// shortform to make degree literals more readable
	double2 deg (double2 deg);
	
	//// Linear interpolation
	
	// linear interpolation
	// like getting the output of a linear function
	// ex. t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	double2 lerp (double2 a, double2 b, double2 t);
	
	// linear mapping
	// sometimes called inverse linear interpolation
	// like getting the x for a y on a linear function
	// ex. map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	double2 map (double2 x, double2 in_a, double2 in_b);
	
	// linear remapping
	// equivalent of lerp(out_a, out_b, map(x, in_a, in_b))
	double2 map (double2 x, double2 in_a, double2 in_b, double2 out_a, double2 out_b);
	
	
	//// Various interpolation
	
	// standard smoothstep interpolation
	double2 smoothstep (double2 x);
	
	// 3 point bezier interpolation
	double2 bezier (double2 a, double2 b, double2 c, double t);
	
	// 4 point bezier interpolation
	double2 bezier (double2 a, double2 b, double2 c, double2 d, double t);
	
	// 5 point bezier interpolation
	double2 bezier (double2 a, double2 b, double2 c, double2 d, double2 e, double t);
	
	
	//// Vector math
	
	// magnitude of vector
	double length (double2 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	double length_sqr (double2 v);
	
	// distance between points, equivalent to length(a - b)
	double distance (double2 a, double2 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	double2 normalize (double2 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	double2 normalizesafe (double2 v);
	
	// dot product
	double dot (double2 l, double2 r);
	
	// 2d cross product hack for convenient 2d stuff
	// same as cross({T.name[:-2]}3(l, 0), {T.name[:-2]}3(r, 0)).z,
	// ie. the cross product of the 2d vectors on the z=0 plane in 3d space and then return the z coord of that (signed mag of cross product)
	double cross (double2 l, double2 r);
	
	// rotate 2d vector counterclockwise 90 deg, ie. double2(-y, x) which is fast
	double2 rotate90 (double2 v);
	
}

