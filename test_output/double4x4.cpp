// file was generated by kissmath.py at <TODO: add github link>
#include "double4x4.hpp"

#include "double2x2.hpp"
#include "double3x3.hpp"
#include "double2x3.hpp"
#include "double3x4.hpp"
#include "float4x4.hpp"

namespace kissmath {
	
	//// Accessors
	
	
	// get cell with row, column indecies
	double const& double4x4::get (int r, int c) const {
		return arr[c][r];
	}
	
	// get matrix column
	double4 const& double4x4::get_column (int indx) const {
		return arr[indx];
	}
	
	// get matrix row
	double4 double4x4::get_row (int indx) const {
		return double4(arr[0][indx], arr[1][indx], arr[2][indx], arr[3][indx]);
	}
	
	//// Constructors
	
	
	// uninitialized constructor
	double4x4::double4x4 () {
		
	}
	
	// supply one value for all cells
	double4x4::double4x4 (double all): 
	arr{double4(all, all, all, all),
		double4(all, all, all, all),
		double4(all, all, all, all),
		double4(all, all, all, all)} {
		
	}
	
	// supply all cells, in row major order for readability -> c<row><column>
	double4x4::double4x4 (double c00, double c01, double c02, double c03,
						  double c10, double c11, double c12, double c13,
						  double c20, double c21, double c22, double c23,
						  double c30, double c31, double c32, double c33): 
	arr{double4(c00, c10, c20, c30),
		double4(c01, c11, c21, c31),
		double4(c02, c12, c22, c32),
		double4(c03, c13, c23, c33)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	double4x4 double4x4::rows (double4 row0, double4 row1, double4 row2, double4 row3) {
		return double4x4(row0[0], row0[1], row0[2], row0[3],
						 row1[0], row1[1], row1[2], row1[3],
						 row2[0], row2[1], row2[2], row2[3],
						 row3[0], row3[1], row3[2], row3[3]);
	}
	
	// supply all cells in row major order
	double4x4 double4x4::rows (double c00, double c01, double c02, double c03,
							   double c10, double c11, double c12, double c13,
							   double c20, double c21, double c22, double c23,
							   double c30, double c31, double c32, double c33) {
		return double4x4(c00, c01, c02, c03,
						 c10, c11, c12, c13,
						 c20, c21, c22, c23,
						 c30, c31, c32, c33);
	}
	
	// supply all column vectors
	double4x4 double4x4::columns (double4 col0, double4 col1, double4 col2, double4 col3) {
		return double4x4(col0[0], col1[0], col2[0], col3[0],
						 col0[1], col1[1], col2[1], col3[1],
						 col0[2], col1[2], col2[2], col3[2],
						 col0[3], col1[3], col2[3], col3[3]);
	}
	
	// supply all cells in column major order
	double4x4 double4x4::columns (double c00, double c10, double c20, double c30,
								  double c01, double c11, double c21, double c31,
								  double c02, double c12, double c22, double c32,
								  double c03, double c13, double c23, double c33) {
		return double4x4(c00, c01, c02, c03,
						 c10, c11, c12, c13,
						 c20, c21, c22, c23,
						 c30, c31, c32, c33);
	}
	
	
	// identity matrix
	double4x4 double4x4::identity () {
		return double4x4(1,0,0,0,
						 0,1,0,0,
						 0,0,1,0,
						 0,0,0,1);
	}
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	double4x4::operator double2x2 () const {
		return double2x2(arr[0][0], arr[1][0],
						 arr[0][1], arr[1][1]);
	}
	
	// extend/truncate matrix of other size
	double4x4::operator double3x3 () const {
		return double3x3(arr[0][0], arr[1][0], arr[2][0],
						 arr[0][1], arr[1][1], arr[2][1],
						 arr[0][2], arr[1][2], arr[2][2]);
	}
	
	// extend/truncate matrix of other size
	double4x4::operator double2x3 () const {
		return double2x3(arr[0][0], arr[1][0], arr[2][0],
						 arr[0][1], arr[1][1], arr[2][1]);
	}
	
	// extend/truncate matrix of other size
	double4x4::operator double3x4 () const {
		return double3x4(arr[0][0], arr[1][0], arr[2][0], arr[3][0],
						 arr[0][1], arr[1][1], arr[2][1], arr[3][1],
						 arr[0][2], arr[1][2], arr[2][2], arr[3][2]);
	}
	
	// typecast
	double4x4::operator float4x4 () const {
		return float4x4((float)arr[0][0], (float)arr[0][1], (float)arr[0][2], (float)arr[0][3],
						(float)arr[1][0], (float)arr[1][1], (float)arr[1][2], (float)arr[1][3],
						(float)arr[2][0], (float)arr[2][1], (float)arr[2][2], (float)arr[2][3],
						(float)arr[3][0], (float)arr[3][1], (float)arr[3][2], (float)arr[3][3]);
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	// add scalar to all matrix cells
	double4x4& double4x4::operator+= (double r) {
		*this = *this + r;
		return *this;
	}
	
	// substract scalar from all matrix cells
	double4x4& double4x4::operator-= (double r) {
		*this = *this - r;
		return *this;
	}
	
	// multiply scalar with all matrix cells
	double4x4& double4x4::operator*= (double r) {
		*this = *this * r;
		return *this;
	}
	
	// divide all matrix cells by scalar
	double4x4& double4x4::operator/= (double r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	// matrix-matrix muliplication
	double4x4& double4x4::operator*= (double4x4 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	
	// componentwise matrix_cell + matrix_cell
	double4x4 operator+ (double4x4 const& l, double4x4 const& r) {
		return double4x4(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0], l.arr[2][0] + r.arr[2][0], l.arr[3][0] + r.arr[3][0],
						 l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1], l.arr[2][1] + r.arr[2][1], l.arr[3][1] + r.arr[3][1],
						 l.arr[0][2] + r.arr[0][2], l.arr[1][2] + r.arr[1][2], l.arr[2][2] + r.arr[2][2], l.arr[3][2] + r.arr[3][2],
						 l.arr[0][3] + r.arr[0][3], l.arr[1][3] + r.arr[1][3], l.arr[2][3] + r.arr[2][3], l.arr[3][3] + r.arr[3][3]);
	}
	
	// componentwise matrix_cell + scalar
	double4x4 operator+ (double4x4 const& l, double r) {
		return double4x4(l.arr[0][0] + r, l.arr[1][0] + r, l.arr[2][0] + r, l.arr[3][0] + r,
						 l.arr[0][1] + r, l.arr[1][1] + r, l.arr[2][1] + r, l.arr[3][1] + r,
						 l.arr[0][2] + r, l.arr[1][2] + r, l.arr[2][2] + r, l.arr[3][2] + r,
						 l.arr[0][3] + r, l.arr[1][3] + r, l.arr[2][3] + r, l.arr[3][3] + r);
	}
	
	// componentwise scalar + matrix_cell
	double4x4 operator+ (double l, double4x4 const& r) {
		return double4x4(l + r.arr[0][0], l + r.arr[1][0], l + r.arr[2][0], l + r.arr[3][0],
						 l + r.arr[0][1], l + r.arr[1][1], l + r.arr[2][1], l + r.arr[3][1],
						 l + r.arr[0][2], l + r.arr[1][2], l + r.arr[2][2], l + r.arr[3][2],
						 l + r.arr[0][3], l + r.arr[1][3], l + r.arr[2][3], l + r.arr[3][3]);
	}
	
	
	// componentwise matrix_cell - matrix_cell
	double4x4 operator- (double4x4 const& l, double4x4 const& r) {
		return double4x4(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0], l.arr[2][0] - r.arr[2][0], l.arr[3][0] - r.arr[3][0],
						 l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1], l.arr[2][1] - r.arr[2][1], l.arr[3][1] - r.arr[3][1],
						 l.arr[0][2] - r.arr[0][2], l.arr[1][2] - r.arr[1][2], l.arr[2][2] - r.arr[2][2], l.arr[3][2] - r.arr[3][2],
						 l.arr[0][3] - r.arr[0][3], l.arr[1][3] - r.arr[1][3], l.arr[2][3] - r.arr[2][3], l.arr[3][3] - r.arr[3][3]);
	}
	
	// componentwise matrix_cell - scalar
	double4x4 operator- (double4x4 const& l, double r) {
		return double4x4(l.arr[0][0] - r, l.arr[1][0] - r, l.arr[2][0] - r, l.arr[3][0] - r,
						 l.arr[0][1] - r, l.arr[1][1] - r, l.arr[2][1] - r, l.arr[3][1] - r,
						 l.arr[0][2] - r, l.arr[1][2] - r, l.arr[2][2] - r, l.arr[3][2] - r,
						 l.arr[0][3] - r, l.arr[1][3] - r, l.arr[2][3] - r, l.arr[3][3] - r);
	}
	
	// componentwise scalar - matrix_cell
	double4x4 operator- (double l, double4x4 const& r) {
		return double4x4(l - r.arr[0][0], l - r.arr[1][0], l - r.arr[2][0], l - r.arr[3][0],
						 l - r.arr[0][1], l - r.arr[1][1], l - r.arr[2][1], l - r.arr[3][1],
						 l - r.arr[0][2], l - r.arr[1][2], l - r.arr[2][2], l - r.arr[3][2],
						 l - r.arr[0][3], l - r.arr[1][3], l - r.arr[2][3], l - r.arr[3][3]);
	}
	
	
	// componentwise matrix_cell * matrix_cell
	double4x4 mul_componentwise (double4x4 const& l, double4x4 const& r) {
		return double4x4(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0], l.arr[2][0] * r.arr[2][0], l.arr[3][0] * r.arr[3][0],
						 l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1], l.arr[2][1] * r.arr[2][1], l.arr[3][1] * r.arr[3][1],
						 l.arr[0][2] * r.arr[0][2], l.arr[1][2] * r.arr[1][2], l.arr[2][2] * r.arr[2][2], l.arr[3][2] * r.arr[3][2],
						 l.arr[0][3] * r.arr[0][3], l.arr[1][3] * r.arr[1][3], l.arr[2][3] * r.arr[2][3], l.arr[3][3] * r.arr[3][3]);
	}
	
	// componentwise matrix_cell * scalar
	double4x4 operator* (double4x4 const& l, double r) {
		return double4x4(l.arr[0][0] * r, l.arr[1][0] * r, l.arr[2][0] * r, l.arr[3][0] * r,
						 l.arr[0][1] * r, l.arr[1][1] * r, l.arr[2][1] * r, l.arr[3][1] * r,
						 l.arr[0][2] * r, l.arr[1][2] * r, l.arr[2][2] * r, l.arr[3][2] * r,
						 l.arr[0][3] * r, l.arr[1][3] * r, l.arr[2][3] * r, l.arr[3][3] * r);
	}
	
	// componentwise scalar * matrix_cell
	double4x4 operator* (double l, double4x4 const& r) {
		return double4x4(l * r.arr[0][0], l * r.arr[1][0], l * r.arr[2][0], l * r.arr[3][0],
						 l * r.arr[0][1], l * r.arr[1][1], l * r.arr[2][1], l * r.arr[3][1],
						 l * r.arr[0][2], l * r.arr[1][2], l * r.arr[2][2], l * r.arr[3][2],
						 l * r.arr[0][3], l * r.arr[1][3], l * r.arr[2][3], l * r.arr[3][3]);
	}
	
	
	// componentwise matrix_cell / matrix_cell
	double4x4 div_componentwise (double4x4 const& l, double4x4 const& r) {
		return double4x4(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0], l.arr[2][0] / r.arr[2][0], l.arr[3][0] / r.arr[3][0],
						 l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1], l.arr[2][1] / r.arr[2][1], l.arr[3][1] / r.arr[3][1],
						 l.arr[0][2] / r.arr[0][2], l.arr[1][2] / r.arr[1][2], l.arr[2][2] / r.arr[2][2], l.arr[3][2] / r.arr[3][2],
						 l.arr[0][3] / r.arr[0][3], l.arr[1][3] / r.arr[1][3], l.arr[2][3] / r.arr[2][3], l.arr[3][3] / r.arr[3][3]);
	}
	
	// componentwise matrix_cell / scalar
	double4x4 operator/ (double4x4 const& l, double r) {
		return double4x4(l.arr[0][0] / r, l.arr[1][0] / r, l.arr[2][0] / r, l.arr[3][0] / r,
						 l.arr[0][1] / r, l.arr[1][1] / r, l.arr[2][1] / r, l.arr[3][1] / r,
						 l.arr[0][2] / r, l.arr[1][2] / r, l.arr[2][2] / r, l.arr[3][2] / r,
						 l.arr[0][3] / r, l.arr[1][3] / r, l.arr[2][3] / r, l.arr[3][3] / r);
	}
	
	// componentwise scalar / matrix_cell
	double4x4 operator/ (double l, double4x4 const& r) {
		return double4x4(l / r.arr[0][0], l / r.arr[1][0], l / r.arr[2][0], l / r.arr[3][0],
						 l / r.arr[0][1], l / r.arr[1][1], l / r.arr[2][1], l / r.arr[3][1],
						 l / r.arr[0][2], l / r.arr[1][2], l / r.arr[2][2], l / r.arr[3][2],
						 l / r.arr[0][3], l / r.arr[1][3], l / r.arr[2][3], l / r.arr[3][3]);
	}
	
	// Matrix ops
	
	
	// matrix-matrix multiply
	double4x4 operator* (double4x4 const& l, double4x4 const& r) {
		return double4x4::columns(l * r.arr[0],
								  l * r.arr[1],
								  l * r.arr[2],
								  l * r.arr[3]);
	}
	
	// matrix-vector multiply
	double4 operator* (double4x4 const& l, double4 r) {
		return double4(l.arr[0].x * r.x + l.arr[1].x * r.y + l.arr[2].x * r.z + l.arr[3].x * r.w,
					   l.arr[0].y * r.x + l.arr[1].y * r.y + l.arr[2].y * r.z + l.arr[3].y * r.w,
					   l.arr[0].z * r.x + l.arr[1].z * r.y + l.arr[2].z * r.z + l.arr[3].z * r.w,
					   l.arr[0].w * r.x + l.arr[1].w * r.y + l.arr[2].w * r.z + l.arr[3].w * r.w);
	}
	
	// vector-matrix multiply
	double4 operator* (double4 l, double4x4 const& r) {
		return double4(l.x * r.arr[0].x + l.y * r.arr[0].y + l.z * r.arr[0].z + l.w * r.arr[0].w,
					   l.x * r.arr[1].x + l.y * r.arr[1].y + l.z * r.arr[1].z + l.w * r.arr[1].w,
					   l.x * r.arr[2].x + l.y * r.arr[2].y + l.z * r.arr[2].z + l.w * r.arr[2].w,
					   l.x * r.arr[3].x + l.y * r.arr[3].y + l.z * r.arr[3].z + l.w * r.arr[3].w);
	}
	
	double4x4 transpose (double4x4 const& m) {
		return double4x4::rows(m.arr[0], m.arr[1], m.arr[2], m.arr[3]);
	}
	
	#define LETTERIFY \
	double a = mat.arr[0][0]; \
	double b = mat.arr[0][1]; \
	double c = mat.arr[0][2]; \
	double d = mat.arr[0][3]; \
	double e = mat.arr[1][0]; \
	double f = mat.arr[1][1]; \
	double g = mat.arr[1][2]; \
	double h = mat.arr[1][3]; \
	double i = mat.arr[2][0]; \
	double j = mat.arr[2][1]; \
	double k = mat.arr[2][2]; \
	double l = mat.arr[2][3]; \
	double m = mat.arr[3][0]; \
	double n = mat.arr[3][1]; \
	double o = mat.arr[3][2]; \
	double p = mat.arr[3][3];
	
	double determinant (double4x4 const& mat) {
		LETTERIFY
		
		return +a*(+f*(k*p - l*o) -g*(j*p - l*n) +h*(j*o - k*n))
			   -b*(+e*(k*p - l*o) -g*(i*p - l*m) +h*(i*o - k*m))
			   +c*(+e*(j*p - l*n) -f*(i*p - l*m) +h*(i*n - j*m))
			   -d*(+e*(j*o - k*n) -f*(i*o - k*m) +g*(i*n - j*m));
	}
	
	double4x4 inverse (double4x4 const& mat) {
		LETTERIFY
		
		double det;
		{ // clac determinate
			det = +a*(+f*(k*p - l*o) -g*(j*p - l*n) +h*(j*o - k*n))
				  -b*(+e*(k*p - l*o) -g*(i*p - l*m) +h*(i*o - k*m))
				  +c*(+e*(j*p - l*n) -f*(i*p - l*m) +h*(i*n - j*m))
				  -d*(+e*(j*o - k*n) -f*(i*o - k*m) +g*(i*n - j*m));
		}
		double inv_det = double(1) / det;
		double ninv_det = -inv_det;
		
		// calc cofactor matrix
		
		double cofac_00 = +f*(k*p - l*o) -g*(j*p - l*n) +h*(j*o - k*n);
		double cofac_01 = +e*(k*p - l*o) -g*(i*p - l*m) +h*(i*o - k*m);
		double cofac_02 = +e*(j*p - l*n) -f*(i*p - l*m) +h*(i*n - j*m);
		double cofac_03 = +e*(j*o - k*n) -f*(i*o - k*m) +g*(i*n - j*m);
		double cofac_10 = +b*(k*p - l*o) -c*(j*p - l*n) +d*(j*o - k*n);
		double cofac_11 = +a*(k*p - l*o) -c*(i*p - l*m) +d*(i*o - k*m);
		double cofac_12 = +a*(j*p - l*n) -b*(i*p - l*m) +d*(i*n - j*m);
		double cofac_13 = +a*(j*o - k*n) -b*(i*o - k*m) +c*(i*n - j*m);
		double cofac_20 = +b*(g*p - h*o) -c*(f*p - h*n) +d*(f*o - g*n);
		double cofac_21 = +a*(g*p - h*o) -c*(e*p - h*m) +d*(e*o - g*m);
		double cofac_22 = +a*(f*p - h*n) -b*(e*p - h*m) +d*(e*n - f*m);
		double cofac_23 = +a*(f*o - g*n) -b*(e*o - g*m) +c*(e*n - f*m);
		double cofac_30 = +b*(g*l - h*k) -c*(f*l - h*j) +d*(f*k - g*j);
		double cofac_31 = +a*(g*l - h*k) -c*(e*l - h*i) +d*(e*k - g*i);
		double cofac_32 = +a*(f*l - h*j) -b*(e*l - h*i) +d*(e*j - f*i);
		double cofac_33 = +a*(f*k - g*j) -b*(e*k - g*i) +c*(e*j - f*i);
		
		double4x4 ret;
		
		ret.arr[0][0] = cofac_00 *  inv_det;
		ret.arr[0][1] = cofac_10 * ninv_det;
		ret.arr[0][2] = cofac_20 *  inv_det;
		ret.arr[0][3] = cofac_30 * ninv_det;
		ret.arr[1][0] = cofac_01 * ninv_det;
		ret.arr[1][1] = cofac_11 *  inv_det;
		ret.arr[1][2] = cofac_21 * ninv_det;
		ret.arr[1][3] = cofac_31 *  inv_det;
		ret.arr[2][0] = cofac_02 *  inv_det;
		ret.arr[2][1] = cofac_12 * ninv_det;
		ret.arr[2][2] = cofac_22 *  inv_det;
		ret.arr[2][3] = cofac_32 * ninv_det;
		ret.arr[3][0] = cofac_03 * ninv_det;
		ret.arr[3][1] = cofac_13 *  inv_det;
		ret.arr[3][2] = cofac_23 * ninv_det;
		ret.arr[3][3] = cofac_33 *  inv_det;
		
		return ret;
	}
	
	#undef LETTERIFY
	
}

