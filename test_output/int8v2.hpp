// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include "int8.hpp"

namespace kissmath {
	//// forward declarations
	
	struct uint8v2;
	struct double2;
	struct float2;
	struct int8v4;
	struct int2;
	struct int16v2;
	struct int64v2;
	struct uint16v2;
	struct bool2;
	struct uint2;
	struct uint64v2;
	struct int8v3;
	
	struct int8v2 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				int8	x, y;
			};
			int8		arr[2];
		};
		
		// Component indexing operator
		int8& operator[] (int i);
		
		// Component indexing operator
		int8 const& operator[] (int i) const;
		
		
		// uninitialized constructor
		int8v2 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		int8v2 (int8 all);
		
		// supply all components
		int8v2 (int8 x, int8 y);
		
		// truncate vector
		int8v2 (int8v3 v);
		
		// truncate vector
		int8v2 (int8v4 v);
		
		
		//// Truncating cast operators
		
		
		//// Type cast operators
		
		// type cast operator
		explicit operator bool2 () const;
		
		// type cast operator
		explicit operator float2 () const;
		
		// type cast operator
		explicit operator double2 () const;
		
		// type cast operator
		explicit operator int16v2 () const;
		
		// type cast operator
		explicit operator int2 () const;
		
		// type cast operator
		explicit operator int64v2 () const;
		
		// type cast operator
		explicit operator uint8v2 () const;
		
		// type cast operator
		explicit operator uint16v2 () const;
		
		// type cast operator
		explicit operator uint2 () const;
		
		// type cast operator
		explicit operator uint64v2 () const;
		
		
		// componentwise arithmetic operator
		int8v2 operator+= (int8v2 r);
		
		// componentwise arithmetic operator
		int8v2 operator-= (int8v2 r);
		
		// componentwise arithmetic operator
		int8v2 operator*= (int8v2 r);
		
		// componentwise arithmetic operator
		int8v2 operator/= (int8v2 r);
		
	};
	
	//// arthmethic ops
	
	int8v2 operator+ (int8v2 v);
	
	int8v2 operator- (int8v2 v);
	
	int8v2 operator+ (int8v2 l, int8v2 r);
	
	int8v2 operator- (int8v2 l, int8v2 r);
	
	int8v2 operator* (int8v2 l, int8v2 r);
	
	int8v2 operator/ (int8v2 l, int8v2 r);
	
	
	//// bitwise ops
	
	int8v2 operator~ (int8v2 v);
	
	int8v2 operator& (int8v2 l, int8v2 r);
	
	int8v2 operator| (int8v2 l, int8v2 r);
	
	int8v2 operator^ (int8v2 l, int8v2 r);
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	bool2 operator< (int8v2 l, int8v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator<= (int8v2 l, int8v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator> (int8v2 l, int8v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator>= (int8v2 l, int8v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator== (int8v2 l, int8v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator!= (int8v2 l, int8v2 r);
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (int8v2 l, int8v2 r);
	
	// componentwise ternary (c ? l : r)
	int8v2 select (bool2 c, int8v2 l, int8v2 r);
	
	
	//// misc ops
	// componentwise absolute
	int8v2 abs (int8v2 v);
	
	// componentwise minimum
	int8v2 min (int8v2 l, int8v2 r);
	
	// componentwise maximum
	int8v2 max (int8v2 l, int8v2 r);
	
	// componentwise clamp into range [a,b]
	int8v2 clamp (int8v2 x, int8v2 a, int8v2 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	int8v2 clamp (int8v2 x);
	
	// get minimum component of vector, optionally get component index via min_index
	int8 min_component (int8v2 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	int8 max_component (int8v2 v, int* max_index=nullptr);
	
	
	// componentwise wrap
	int8v2 wrap (int8v2 v, int8v2 range);
	
	// componentwise wrap
	int8v2 wrap (int8v2 v, int8v2 a, int8v2 b);
	
	
	
	//// Vector math
	
	// magnitude of vector
	float length (int8v2 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	int8 length_sqr (int8v2 v);
	
	// distance between points, equivalent to length(a - b)
	float distance (int8v2 a, int8v2 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	float2 normalize (int8v2 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	float2 normalizesafe (int8v2 v);
	
	// dot product
	int8 dot (int8v2 l, int8v2 r);
	
	// 2d cross product hack for convenient 2d stuff
	// same as cross({T.name[:-2]}3(l, 0), {T.name[:-2]}3(r, 0)).z,
	// ie. the cross product of the 2d vectors on the z=0 plane in 3d space and then return the z coord of that (signed mag of cross product)
	int8 cross (int8v2 l, int8v2 r);
	
	// rotate 2d vector counterclockwise 90 deg, ie. int8v2(-y, x) which is fast
	int8v2 rotate90 (int8v2 v);
	
}

