// file was generated by kissmath.py at <TODO: add github link>
#include "double2x2.hpp"

#include "double3x3.hpp"
#include "double4x4.hpp"
#include "double2x3.hpp"
#include "double3x4.hpp"
#include "float2x2.hpp"

namespace kissmath {
	
	//// Accessors
	
	
	// get cell with row, column indecies
	double const& double2x2::get (int r, int c) const {
		return arr[c][r];
	}
	
	// get matrix column
	double2 const& double2x2::get_column (int indx) const {
		return arr[indx];
	}
	
	// get matrix row
	double2 double2x2::get_row (int indx) const {
		return double2(arr[0][indx], arr[1][indx]);
	}
	
	//// Constructors
	
	
	// uninitialized constructor
	double2x2::double2x2 () {
		
	}
	
	// supply one value for all cells
	double2x2::double2x2 (double all): 
	arr{double2(all, all),
		double2(all, all)} {
		
	}
	
	// supply all cells, in row major order for readability -> c<row><column>
	double2x2::double2x2 (double c00, double c01,
						  double c10, double c11): 
	arr{double2(c00, c10),
		double2(c01, c11)} {
		
	}
	
	// static rows() and columns() methods are preferred over constructors, to avoid confusion if column or row vectors are supplied to the constructor
	
	// supply all row vectors
	double2x2 double2x2::rows (double2 row0, double2 row1) {
		return double2x2(row0[0], row0[1],
						 row1[0], row1[1]);
	}
	
	// supply all cells in row major order
	double2x2 double2x2::rows (double c00, double c01,
							   double c10, double c11) {
		return double2x2(c00, c01,
						 c10, c11);
	}
	
	// supply all column vectors
	double2x2 double2x2::columns (double2 col0, double2 col1) {
		return double2x2(col0[0], col1[0],
						 col0[1], col1[1]);
	}
	
	// supply all cells in column major order
	double2x2 double2x2::columns (double c00, double c10,
								  double c01, double c11) {
		return double2x2(c00, c01,
						 c10, c11);
	}
	
	
	// identity matrix
	double2x2 double2x2::identity () {
		return double2x2(1,0,
						 0,1);
	}
	
	// Casting operators
	
	
	// extend/truncate matrix of other size
	double2x2::operator double3x3 () const {
		return double3x3(arr[0][0], arr[1][0],         0,
						 arr[0][1], arr[1][1],         0,
						         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	double2x2::operator double4x4 () const {
		return double4x4(arr[0][0], arr[1][0],         0,         0,
						 arr[0][1], arr[1][1],         0,         0,
						         0,         0,         1,         0,
						         0,         0,         0,         1);
	}
	
	// extend/truncate matrix of other size
	double2x2::operator double2x3 () const {
		return double2x3(arr[0][0], arr[1][0],         0,
						 arr[0][1], arr[1][1],         0);
	}
	
	// extend/truncate matrix of other size
	double2x2::operator double3x4 () const {
		return double3x4(arr[0][0], arr[1][0],         0,         0,
						 arr[0][1], arr[1][1],         0,         0,
						         0,         0,         1,         0);
	}
	
	// typecast
	double2x2::operator float2x2 () const {
		return float2x2((float)arr[0][0], (float)arr[0][1],
						(float)arr[1][0], (float)arr[1][1]);
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	// add scalar to all matrix cells
	double2x2& double2x2::operator+= (double r) {
		*this = *this + r;
		return *this;
	}
	
	// substract scalar from all matrix cells
	double2x2& double2x2::operator-= (double r) {
		*this = *this - r;
		return *this;
	}
	
	// multiply scalar with all matrix cells
	double2x2& double2x2::operator*= (double r) {
		*this = *this * r;
		return *this;
	}
	
	// divide all matrix cells by scalar
	double2x2& double2x2::operator/= (double r) {
		*this = *this / r;
		return *this;
	}
	
	// Matrix multiplication
	
	
	// matrix-matrix muliplication
	double2x2& double2x2::operator*= (double2x2 const& r) {
		*this = *this * r;
		return *this;
	}
	
	// Componentwise operators; These might be useful in some cases
	
	
	
	// componentwise matrix_cell + matrix_cell
	double2x2 operator+ (double2x2 const& l, double2x2 const& r) {
		return double2x2(l.arr[0][0] + r.arr[0][0], l.arr[1][0] + r.arr[1][0],
						 l.arr[0][1] + r.arr[0][1], l.arr[1][1] + r.arr[1][1]);
	}
	
	// componentwise matrix_cell + scalar
	double2x2 operator+ (double2x2 const& l, double r) {
		return double2x2(l.arr[0][0] + r, l.arr[1][0] + r,
						 l.arr[0][1] + r, l.arr[1][1] + r);
	}
	
	// componentwise scalar + matrix_cell
	double2x2 operator+ (double l, double2x2 const& r) {
		return double2x2(l + r.arr[0][0], l + r.arr[1][0],
						 l + r.arr[0][1], l + r.arr[1][1]);
	}
	
	
	// componentwise matrix_cell - matrix_cell
	double2x2 operator- (double2x2 const& l, double2x2 const& r) {
		return double2x2(l.arr[0][0] - r.arr[0][0], l.arr[1][0] - r.arr[1][0],
						 l.arr[0][1] - r.arr[0][1], l.arr[1][1] - r.arr[1][1]);
	}
	
	// componentwise matrix_cell - scalar
	double2x2 operator- (double2x2 const& l, double r) {
		return double2x2(l.arr[0][0] - r, l.arr[1][0] - r,
						 l.arr[0][1] - r, l.arr[1][1] - r);
	}
	
	// componentwise scalar - matrix_cell
	double2x2 operator- (double l, double2x2 const& r) {
		return double2x2(l - r.arr[0][0], l - r.arr[1][0],
						 l - r.arr[0][1], l - r.arr[1][1]);
	}
	
	
	// componentwise matrix_cell * matrix_cell
	double2x2 mul_componentwise (double2x2 const& l, double2x2 const& r) {
		return double2x2(l.arr[0][0] * r.arr[0][0], l.arr[1][0] * r.arr[1][0],
						 l.arr[0][1] * r.arr[0][1], l.arr[1][1] * r.arr[1][1]);
	}
	
	// componentwise matrix_cell * scalar
	double2x2 operator* (double2x2 const& l, double r) {
		return double2x2(l.arr[0][0] * r, l.arr[1][0] * r,
						 l.arr[0][1] * r, l.arr[1][1] * r);
	}
	
	// componentwise scalar * matrix_cell
	double2x2 operator* (double l, double2x2 const& r) {
		return double2x2(l * r.arr[0][0], l * r.arr[1][0],
						 l * r.arr[0][1], l * r.arr[1][1]);
	}
	
	
	// componentwise matrix_cell / matrix_cell
	double2x2 div_componentwise (double2x2 const& l, double2x2 const& r) {
		return double2x2(l.arr[0][0] / r.arr[0][0], l.arr[1][0] / r.arr[1][0],
						 l.arr[0][1] / r.arr[0][1], l.arr[1][1] / r.arr[1][1]);
	}
	
	// componentwise matrix_cell / scalar
	double2x2 operator/ (double2x2 const& l, double r) {
		return double2x2(l.arr[0][0] / r, l.arr[1][0] / r,
						 l.arr[0][1] / r, l.arr[1][1] / r);
	}
	
	// componentwise scalar / matrix_cell
	double2x2 operator/ (double l, double2x2 const& r) {
		return double2x2(l / r.arr[0][0], l / r.arr[1][0],
						 l / r.arr[0][1], l / r.arr[1][1]);
	}
	
	// Matrix ops
	
	
	// matrix-matrix multiply
	double2x2 operator* (double2x2 const& l, double2x2 const& r) {
		double2x2 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		return ret;
	}
	
	// matrix-matrix multiply
	double2x3 operator* (double2x2 const& l, double2x3 const& r) {
		double2x3 ret;
		ret.arr[0] = l * r.arr[0];
		ret.arr[1] = l * r.arr[1];
		ret.arr[2] = l * r.arr[2];
		return ret;
	}
	
	// matrix-vector multiply
	double2 operator* (double2x2 const& l, double2 r) {
		double2 ret;
		ret[0] = l.arr[0].x * r.x + l.arr[1].x * r.y;
		ret[1] = l.arr[0].y * r.x + l.arr[1].y * r.y;
		return ret;
	}
	
	// vector-matrix multiply
	double2 operator* (double2 l, double2x2 const& r) {
		double2 ret;
		ret[0] = l.x * r.arr[0].x + l.y * r.arr[0].y;
		ret[1] = l.x * r.arr[1].x + l.y * r.arr[1].y;
		return ret;
	}
	
	double2x2 transpose (double2x2 const& m) {
		return double2x2::rows(m.arr[0], m.arr[1]);
	}
	
	#define LETTERIFY \
	double a = mat.arr[0][0]; \
	double b = mat.arr[0][1]; \
	double c = mat.arr[1][0]; \
	double d = mat.arr[1][1];
	
	double determinant (double2x2 const& mat) {
		LETTERIFY
		
		return a*d - b*c;
	}
	
	double2x2 inverse (double2x2 const& mat) {
		LETTERIFY
		
		double det;
		{ // clac determinate
			det = a*d - b*c;
		}
		// calc cofactor matrix
		
		double cofac_00 = d;
		double cofac_01 = c;
		double cofac_10 = b;
		double cofac_11 = a;
		
		double2x2 ret;
		
		double inv_det = double(1) / det;
		double ninv_det = -inv_det;
		
		ret.arr[0][0] = cofac_00 *  inv_det;
		ret.arr[0][1] = cofac_10 * ninv_det;
		ret.arr[1][0] = cofac_01 * ninv_det;
		ret.arr[1][1] = cofac_11 *  inv_det;
		
		return ret;
	}
	
	#undef LETTERIFY
	
}

