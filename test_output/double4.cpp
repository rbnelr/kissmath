// file was generated by kissmath.py at <TODO: add github link>
#include "double4.hpp"

#include "float4.hpp"
#include "double3.hpp"
#include "uint64v4.hpp"
#include "uint8v4.hpp"
#include "double2.hpp"
#include "uint16v4.hpp"
#include "int64v4.hpp"
#include "uint4.hpp"
#include "int16v4.hpp"
#include "int8v4.hpp"
#include "int4.hpp"
#include "bool4.hpp"

namespace kissmath {
	//// forward declarations
	// typedef these because the _t suffix is kinda unwieldy when using these types often
	
	typedef uint64_t uint64;
	typedef uint8_t uint8;
	typedef uint16_t uint16;
	typedef int64_t int64;
	typedef unsigned int uint;
	typedef int16_t int16;
	typedef int8_t int8;
	
	// Component indexing operator
	double& double4::operator[] (int i) {
		return arr[i];
	}
	
	// Component indexing operator
	double const& double4::operator[] (int i) const {
		return arr[i];
	}
	
	
	// uninitialized constructor
	double4::double4 () {
		
	}
	
	// sets all components to one value
	// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
	// and short initialization like float3 a = 0; works
	double4::double4 (double all): x{all}, y{all}, z{all}, w{all} {
		
	}
	
	// supply all components
	double4::double4 (double x, double y, double z, double w): x{x}, y{y}, z{z}, w{w} {
		
	}
	
	// extend vector
	double4::double4 (double2 xy, double z, double w): x{xy.x}, y{xy.y}, z{z}, w{w} {
		
	}
	
	// extend vector
	double4::double4 (double3 xyz, double w): x{xyz.x}, y{xyz.y}, z{xyz.z}, w{w} {
		
	}
	
	//// Truncating cast operators
	
	
	// truncating cast operator
	double4::operator double2 () const {
		return double2(x, y);
	}
	
	// truncating cast operator
	double4::operator double3 () const {
		return double3(x, y, z);
	}
	
	//// Type cast operators
	
	
	// type cast operator
	double4::operator bool4 () const {
		return bool4((bool)x, (bool)y, (bool)z, (bool)w);
	}
	
	// type cast operator
	double4::operator float4 () const {
		return float4((float)x, (float)y, (float)z, (float)w);
	}
	
	// type cast operator
	double4::operator int8v4 () const {
		return int8v4((int8)x, (int8)y, (int8)z, (int8)w);
	}
	
	// type cast operator
	double4::operator int16v4 () const {
		return int16v4((int16)x, (int16)y, (int16)z, (int16)w);
	}
	
	// type cast operator
	double4::operator int4 () const {
		return int4((int)x, (int)y, (int)z, (int)w);
	}
	
	// type cast operator
	double4::operator int64v4 () const {
		return int64v4((int64)x, (int64)y, (int64)z, (int64)w);
	}
	
	// type cast operator
	double4::operator uint8v4 () const {
		return uint8v4((uint8)x, (uint8)y, (uint8)z, (uint8)w);
	}
	
	// type cast operator
	double4::operator uint16v4 () const {
		return uint16v4((uint16)x, (uint16)y, (uint16)z, (uint16)w);
	}
	
	// type cast operator
	double4::operator uint4 () const {
		return uint4((uint)x, (uint)y, (uint)z, (uint)w);
	}
	
	// type cast operator
	double4::operator uint64v4 () const {
		return uint64v4((uint64)x, (uint64)y, (uint64)z, (uint64)w);
	}
	
	
	// componentwise arithmetic operator
	double4 double4::operator+= (double4 r) {
		x += r.x;
		y += r.y;
		z += r.z;
		w += r.w;
		return *this;
	}
	
	// componentwise arithmetic operator
	double4 double4::operator-= (double4 r) {
		x -= r.x;
		y -= r.y;
		z -= r.z;
		w -= r.w;
		return *this;
	}
	
	// componentwise arithmetic operator
	double4 double4::operator*= (double4 r) {
		x *= r.x;
		y *= r.y;
		z *= r.z;
		w *= r.w;
		return *this;
	}
	
	// componentwise arithmetic operator
	double4 double4::operator/= (double4 r) {
		x /= r.x;
		y /= r.y;
		z /= r.z;
		w /= r.w;
		return *this;
	}
	
	//// arthmethic ops
	
	
	double4 operator+ (double4 v) {
		return double4(+v.x, +v.y, +v.z, +v.w);
	}
	
	double4 operator- (double4 v) {
		return double4(-v.x, -v.y, -v.z, -v.w);
	}
	
	double4 operator+ (double4 l, double4 r) {
		return double4(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w);
	}
	
	double4 operator- (double4 l, double4 r) {
		return double4(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w);
	}
	
	double4 operator* (double4 l, double4 r) {
		return double4(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w);
	}
	
	double4 operator/ (double4 l, double4 r) {
		return double4(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w);
	}
	
	//// bitwise ops
	
	
	//// comparison ops
	
	
	// componentwise comparison returns a bool vector
	bool4 operator< (double4 l, double4 r) {
		return bool4(l.x < r.x, l.y < r.y, l.z < r.z, l.w < r.w);
	}
	
	// componentwise comparison returns a bool vector
	bool4 operator<= (double4 l, double4 r) {
		return bool4(l.x <= r.x, l.y <= r.y, l.z <= r.z, l.w <= r.w);
	}
	
	// componentwise comparison returns a bool vector
	bool4 operator> (double4 l, double4 r) {
		return bool4(l.x > r.x, l.y > r.y, l.z > r.z, l.w > r.w);
	}
	
	// componentwise comparison returns a bool vector
	bool4 operator>= (double4 l, double4 r) {
		return bool4(l.x >= r.x, l.y >= r.y, l.z >= r.z, l.w >= r.w);
	}
	
	// componentwise comparison returns a bool vector
	bool4 operator== (double4 l, double4 r) {
		return bool4(l.x == r.x, l.y == r.y, l.z == r.z, l.w == r.w);
	}
	
	// componentwise comparison returns a bool vector
	bool4 operator!= (double4 l, double4 r) {
		return bool4(l.x != r.x, l.y != r.y, l.z != r.z, l.w != r.w);
	}
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (double4 l, double4 r) {
		return all(l == r);
	}
	
	// componentwise ternary (c ? l : r)
	double4 select (bool4 c, double4 l, double4 r) {
		return double4(c.x ? l.x : r.x, c.y ? l.y : r.y, c.z ? l.z : r.z, c.w ? l.w : r.w);
	}
	
	//// misc ops
	
	// componentwise absolute
	double4 abs (double4 v) {
		return double4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
	}
	
	// componentwise minimum
	double4 min (double4 l, double4 r) {
		return double4(min(l.x,r.x), min(l.y,r.y), min(l.z,r.z), min(l.w,r.w));
	}
	
	// componentwise maximum
	double4 max (double4 l, double4 r) {
		return double4(max(l.x,r.x), max(l.y,r.y), max(l.z,r.z), max(l.w,r.w));
	}
	
	// componentwise clamp into range [a,b]
	double4 clamp (double4 x, double4 a, double4 b) {
		return min(max(x,a), b);
	}
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	double4 clamp (double4 x) {
		return min(max(x, double(0)), double(1));
	}
	
	// get minimum component of vector, optionally get component index via min_index
	double min_component (double4 v, int* min_index) {
		int index = 0;
		double min_val = v.x;	
		for (int i=1; i<4; ++i) {
			if (v.arr[i] <= min_val) {
				index = i;
				min_val = v.arr[i];
			}
		}
		if (min_index) *min_index = index;
		return min_val;
	}
	
	// get maximum component of vector, optionally get component index via max_index
	double max_component (double4 v, int* max_index) {
		int index = 0;
		double max_val = v.x;	
		for (int i=1; i<4; ++i) {
			if (v.arr[i] >= max_val) {
				index = i;
				max_val = v.arr[i];
			}
		}
		if (max_index) *max_index = index;
		return max_val;
	}
	
	
	// componentwise floor
	double4 floor (double4 v) {
		return double4(floor(v.x), floor(v.y), floor(v.z), floor(v.w));
	}
	
	// componentwise ceil
	double4 ceil (double4 v) {
		return double4(ceil(v.x), ceil(v.y), ceil(v.z), ceil(v.w));
	}
	
	// componentwise round
	double4 round (double4 v) {
		return double4(round(v.x), round(v.y), round(v.z), round(v.w));
	}
	
	// componentwise floor to int
	int64v4 floori (double4 v) {
		return int64v4(floori(v.x), floori(v.y), floori(v.z), floori(v.w));
	}
	
	// componentwise ceil to int
	int64v4 ceili (double4 v) {
		return int64v4(ceili(v.x), ceili(v.y), ceili(v.z), ceili(v.w));
	}
	
	// componentwise round to int
	int64v4 roundi (double4 v) {
		return int64v4(roundi(v.x), roundi(v.y), roundi(v.z), roundi(v.w));
	}
	
	// componentwise pow
	double4 pow (double4 v, double4 e) {
		return double4(pow(v.x,e.x), pow(v.y,e.y), pow(v.z,e.z), pow(v.w,e.w));
	}
	
	// componentwise wrap
	double4 wrap (double4 v, double4 range) {
		return double4(wrap(v.x,range.x), wrap(v.y,range.y), wrap(v.z,range.z), wrap(v.w,range.w));
	}
	
	// componentwise wrap
	double4 wrap (double4 v, double4 a, double4 b) {
		return double4(wrap(v.x,a.x,b.x), wrap(v.y,a.y,b.y), wrap(v.z,a.z,b.z), wrap(v.w,a.w,b.w));
	}
	
	
	//// Angle conversion
	
	
	// converts degrees to radiants
	double4 to_radians (double4 deg) {
		return deg * DEG_TO_RADd;
	}
	
	// converts radiants to degrees
	double4 to_degrees (double4 rad) {
		return rad * RAD_TO_DEGd;
	}
	
	// converts degrees to radiants
	// shortform to make degree literals more readable
	double4 deg (double4 deg) {
		return deg * DEG_TO_RADd;
	}
	
	// linear interpolation
	// like getting the output of a linear function
	// ex. t=0 -> a ; t=1 -> b ; t=0.5 -> (a+b)/2
	double4 lerp (double4 a, double4 b, double4 t) {
		return t * (b - a) + a;
	}
	
	// linear mapping
	// sometimes called inverse linear interpolation
	// like getting the x for a y on a linear function
	// ex. map(70, 0,100) -> 0.7 ; map(0.5, -1,+1) -> 0.75
	double4 map (double4 x, double4 in_a, double4 in_b) {
		return (x - in_a) / (in_b - in_a);
	}
	
	// linear remapping
	// equivalent of lerp(out_a, out_b, map(x, in_a, in_b))
	double4 map (double4 x, double4 in_a, double4 in_b, double4 out_a, double4 out_b) {
		return lerp(out_a, out_b, map(x, in_a, in_b));
	}
	
	//// Various interpolation
	
	
	// standard smoothstep interpolation
	double4 smoothstep (double4 x) {
		double4 t = clamp(x);
		return t * t * (3.0 - 2.0 * t);
	}
	
	// 3 point bezier interpolation
	double4 bezier (double4 a, double4 b, double4 c, double t) {
		double4 d = lerp(a, b, t);
		double4 e = lerp(b, c, t);
		double4 f = lerp(d, e, t);
		return f;
	}
	
	// 4 point bezier interpolation
	double4 bezier (double4 a, double4 b, double4 c, double4 d, double t) {
		return bezier(
					  lerp(a, b, t),
					  lerp(b, c, t),
					  lerp(c, d, t),
					  t
			   );
	}
	
	// 5 point bezier interpolation
	double4 bezier (double4 a, double4 b, double4 c, double4 d, double4 e, double t) {
		return bezier(
					  lerp(a, b, t),
					  lerp(b, c, t),
					  lerp(c, d, t),
					  lerp(d, e, t),
					  t
			   );
	}
	
	//// Vector math
	
	
	// magnitude of vector
	double length (double4 v) {
		return sqrt((double)(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w));
	}
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	double length_sqr (double4 v) {
		return v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w;
	}
	
	// distance between points, equivalent to length(a - b)
	double distance (double4 a, double4 b) {
		return length(a - b);
	}
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	double4 normalize (double4 v) {
		return double4(v) / length(v);
	}
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	double4 normalizesafe (double4 v) {
		double len = length(v);
		if (len == double(0)) {
			return double(0);
		}
		return double4(v) / double4(len);
	}
	
	// dot product
	double dot (double4 l, double4 r) {
		return l.x * r.x + l.y * r.y + l.z * r.z + l.w * r.w;
	}
}

