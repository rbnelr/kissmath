// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include "uint16.hpp"

namespace kissmath {
	//// forward declarations
	
	struct int2;
	struct int8v2;
	struct double2;
	struct uint8v2;
	struct float2;
	struct bool2;
	struct uint16v3;
	struct int64v2;
	struct uint64v2;
	struct uint16v4;
	struct uint2;
	struct int16v2;
	
	struct uint16v2 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				uint16	x, y;
			};
			uint16		arr[2];
		};
		
		// Component indexing operator
		uint16& operator[] (int i);
		
		// Component indexing operator
		uint16 const& operator[] (int i) const;
		
		
		// uninitialized constructor
		uint16v2 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		uint16v2 (uint16 all);
		
		// supply all components
		uint16v2 (uint16 x, uint16 y);
		
		// truncate vector
		uint16v2 (uint16v3 v);
		
		// truncate vector
		uint16v2 (uint16v4 v);
		
		
		//// Truncating cast operators
		
		
		//// Type cast operators
		
		// type cast operator
		explicit operator bool2 () const;
		
		// type cast operator
		explicit operator float2 () const;
		
		// type cast operator
		explicit operator double2 () const;
		
		// type cast operator
		explicit operator int8v2 () const;
		
		// type cast operator
		explicit operator int16v2 () const;
		
		// type cast operator
		explicit operator int2 () const;
		
		// type cast operator
		explicit operator int64v2 () const;
		
		// type cast operator
		explicit operator uint8v2 () const;
		
		// type cast operator
		explicit operator uint2 () const;
		
		// type cast operator
		explicit operator uint64v2 () const;
		
		
		// componentwise arithmetic operator
		uint16v2 operator+= (uint16v2 r);
		
		// componentwise arithmetic operator
		uint16v2 operator-= (uint16v2 r);
		
		// componentwise arithmetic operator
		uint16v2 operator*= (uint16v2 r);
		
		// componentwise arithmetic operator
		uint16v2 operator/= (uint16v2 r);
		
	};
	
	//// arthmethic ops
	
	uint16v2 operator+ (uint16v2 v);
	
	uint16v2 operator+ (uint16v2 l, uint16v2 r);
	
	uint16v2 operator- (uint16v2 l, uint16v2 r);
	
	uint16v2 operator* (uint16v2 l, uint16v2 r);
	
	uint16v2 operator/ (uint16v2 l, uint16v2 r);
	
	
	//// bitwise ops
	
	uint16v2 operator~ (uint16v2 v);
	
	uint16v2 operator& (uint16v2 l, uint16v2 r);
	
	uint16v2 operator| (uint16v2 l, uint16v2 r);
	
	uint16v2 operator^ (uint16v2 l, uint16v2 r);
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	bool2 operator< (uint16v2 l, uint16v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator<= (uint16v2 l, uint16v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator> (uint16v2 l, uint16v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator>= (uint16v2 l, uint16v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator== (uint16v2 l, uint16v2 r);
	
	// componentwise comparison returns a bool vector
	bool2 operator!= (uint16v2 l, uint16v2 r);
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (uint16v2 l, uint16v2 r);
	
	// componentwise ternary (c ? l : r)
	uint16v2 select (bool2 c, uint16v2 l, uint16v2 r);
	
	
	//// misc ops
	// componentwise minimum
	uint16v2 min (uint16v2 l, uint16v2 r);
	
	// componentwise maximum
	uint16v2 max (uint16v2 l, uint16v2 r);
	
	// componentwise clamp into range [a,b]
	uint16v2 clamp (uint16v2 x, uint16v2 a, uint16v2 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	uint16v2 clamp (uint16v2 x);
	
	// get minimum component of vector, optionally get component index via min_index
	uint16 min_component (uint16v2 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	uint16 max_component (uint16v2 v, int* max_index=nullptr);
	
	
	// componentwise wrap
	uint16v2 wrap (uint16v2 v, uint16v2 range);
	
	// componentwise wrap
	uint16v2 wrap (uint16v2 v, uint16v2 a, uint16v2 b);
	
	
	
	//// Vector math
	
}

