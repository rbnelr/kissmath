// file was generated by kissmath.py at <TODO: add github link>
#pragma once

#include "int8.hpp"

namespace kissmath {
	//// forward declarations
	
	struct int8v2;
	struct float4;
	struct int16v4;
	struct int8v3;
	struct uint16v4;
	struct uint4;
	struct double4;
	struct int4;
	struct int64v4;
	struct bool4;
	struct uint64v4;
	struct uint8v4;
	
	struct int8v4 {
		union { // Union with named members and array members to allow vector[] operator, not 100% sure that this is not undefined behavoir, but I think all compilers definitely don't screw up this use case
			struct {
				int8	x, y, z, w;
			};
			int8		arr[4];
		};
		
		// Component indexing operator
		int8& operator[] (int i);
		
		// Component indexing operator
		int8 const& operator[] (int i) const;
		
		
		// uninitialized constructor
		int8v4 ();
		
		// sets all components to one value
		// implicit constructor -> float3(x,y,z) * 5 will be turned into float3(x,y,z) * float3(5) by to compiler to be able to execute operator*(float3, float3), which is desirable
		// and short initialization like float3 a = 0; works
		int8v4 (int8 all);
		
		// supply all components
		int8v4 (int8 x, int8 y, int8 z, int8 w);
		
		// extend vector
		int8v4 (int8v2 xy, int8 z, int8 w);
		
		// extend vector
		int8v4 (int8v3 xyz, int8 w);
		
		
		//// Truncating cast operators
		
		// truncating cast operator
		explicit operator int8v2 () const;
		
		// truncating cast operator
		explicit operator int8v3 () const;
		
		
		//// Type cast operators
		
		// type cast operator
		explicit operator bool4 () const;
		
		// type cast operator
		explicit operator float4 () const;
		
		// type cast operator
		explicit operator double4 () const;
		
		// type cast operator
		explicit operator int16v4 () const;
		
		// type cast operator
		explicit operator int4 () const;
		
		// type cast operator
		explicit operator int64v4 () const;
		
		// type cast operator
		explicit operator uint8v4 () const;
		
		// type cast operator
		explicit operator uint16v4 () const;
		
		// type cast operator
		explicit operator uint4 () const;
		
		// type cast operator
		explicit operator uint64v4 () const;
		
		
		// componentwise arithmetic operator
		int8v4 operator+= (int8v4 r);
		
		// componentwise arithmetic operator
		int8v4 operator-= (int8v4 r);
		
		// componentwise arithmetic operator
		int8v4 operator*= (int8v4 r);
		
		// componentwise arithmetic operator
		int8v4 operator/= (int8v4 r);
		
	};
	
	//// arthmethic ops
	
	int8v4 operator+ (int8v4 v);
	
	int8v4 operator- (int8v4 v);
	
	int8v4 operator+ (int8v4 l, int8v4 r);
	
	int8v4 operator- (int8v4 l, int8v4 r);
	
	int8v4 operator* (int8v4 l, int8v4 r);
	
	int8v4 operator/ (int8v4 l, int8v4 r);
	
	
	//// bitwise ops
	
	int8v4 operator~ (int8v4 v);
	
	int8v4 operator& (int8v4 l, int8v4 r);
	
	int8v4 operator| (int8v4 l, int8v4 r);
	
	int8v4 operator^ (int8v4 l, int8v4 r);
	
	
	//// comparison ops
	
	// componentwise comparison returns a bool vector
	bool4 operator< (int8v4 l, int8v4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator<= (int8v4 l, int8v4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator> (int8v4 l, int8v4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator>= (int8v4 l, int8v4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator== (int8v4 l, int8v4 r);
	
	// componentwise comparison returns a bool vector
	bool4 operator!= (int8v4 l, int8v4 r);
	
	// vectors are equal, equivalent to all(l == r)
	bool equal (int8v4 l, int8v4 r);
	
	// componentwise ternary (c ? l : r)
	int8v4 select (bool4 c, int8v4 l, int8v4 r);
	
	
	//// misc ops
	// componentwise absolute
	int8v4 abs (int8v4 v);
	
	// componentwise minimum
	int8v4 min (int8v4 l, int8v4 r);
	
	// componentwise maximum
	int8v4 max (int8v4 l, int8v4 r);
	
	// componentwise clamp into range [a,b]
	int8v4 clamp (int8v4 x, int8v4 a, int8v4 b);
	
	// componentwise clamp into range [0,1] also known as saturate in hlsl
	int8v4 clamp (int8v4 x);
	
	// get minimum component of vector, optionally get component index via min_index
	int8 min_component (int8v4 v, int* min_index=nullptr);
	
	// get maximum component of vector, optionally get component index via max_index
	int8 max_component (int8v4 v, int* max_index=nullptr);
	
	
	// componentwise wrap
	int8v4 wrap (int8v4 v, int8v4 range);
	
	// componentwise wrap
	int8v4 wrap (int8v4 v, int8v4 a, int8v4 b);
	
	
	
	//// Vector math
	
	// magnitude of vector
	float length (int8v4 v);
	
	// squared magnitude of vector, cheaper than length() because it avoids the sqrt(), some algorithms only need the squared magnitude
	int8 length_sqr (int8v4 v);
	
	// distance between points, equivalent to length(a - b)
	float distance (int8v4 a, int8v4 b);
	
	// normalize vector so that it has length() = 1, undefined for zero vector
	float4 normalize (int8v4 v);
	
	// normalize vector so that it has length() = 1, returns zero vector if vector was zero vector
	float4 normalizesafe (int8v4 v);
	
	// dot product
	int8 dot (int8v4 l, int8v4 r);
	
}

