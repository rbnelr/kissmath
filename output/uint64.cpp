// file was generated by kissmath.py at <TODO: add github link>
#include "uint64.hpp"

namespace kissmath {
	
	// wrap x into range [0,range)
	// negative x wrap back to +range unlike c++ % operator
	// negative range supported
	uint64 wrap (uint64 x, uint64 range) {
		uint64 modded = x % range;
		if (range > 0) {
			if (modded < 0) modded += range;
		} else {
			if (modded > 0) modded += range;
		}
		return modded;
	}
	
	// wrap x into [a,b) range
	uint64 wrap (uint64 x, uint64 a, uint64 b) {
		x -= a;
		uint64 range = b -a;
		
		uint64 modulo = wrap(x, range);
		
		return modulo + a;
	}
	
	// clamp x into range [a, b]
	// equivalent to min(max(x,a), b)
	uint64 clamp (uint64 x, uint64 a, uint64 b) {
		return min(max(x, a), b);
	}
	
	// clamp x into range [0, 1]
	// also known as saturate in hlsl
	uint64 clamp (uint64 x) {
		return min(max(x, uint64(0)), uint64(1));
	}
	
	// returns the greater value of a and b
	uint64 min (uint64 l, uint64 r) {
		return l <= r ? l : r;
	}
	
	// returns the smaller value of a and b
	uint64 max (uint64 l, uint64 r) {
		return l >= r ? l : r;
	}
	
	// equivalent to ternary c ? l : r
	// for conformity with vectors
	uint64 select (bool c, uint64 l, uint64 r) {
		return c ? l : r;
	}
	
}

